#include "libraries/mbusparser/mbusparser.h"
#include <iostream>
#include <cassert>

const uint8_t sample[] = {
  0x7e, 0xa0, 0xe2, 0x2b, 0x21, 0x13, 0x23, 0x9a,
  0xe6, 0xe7, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, // Unknown
  0x0c, 0x07, 0xe2, 0x0b, 0x12, 0x07, 0x14, 0x17, 0x1e, 0xff, 0x80, 0x00, 0x00,
  0x02, 0x19, // List ID
  0x0a, 0x0e, 0x4b, 0x61, 0x6d, 0x73, 0x74, 0x72, 0x75, 0x70, 0x5f, 0x56, 0x30, 0x30, 0x30, 0x31, //OBIS List version ID
  0x09, 0x06, 0x01, 0x01, 0x00, 0x00, 0x05, 0xff, // OBIS for Meter ID
  0x0a, 0x10, 0x35, 0x37, 0x30, 0x36, 0x35, 0x36, 0x37, // Meter ID
  0x32, 0x38, 0x34, 0x32, 0x33, 0x35, 0x31, 0x36, 0x37, // OBIS for Meter Type
  0x09, 0x06, 0x01, 0x01, 0x60, 0x01, 0x01, 0xff, 0x0a, 0x12, 0x36, 0x38, 0x34, 0x31, 0x31, 0x32, 0x31, 0x42, 0x4e, 0x32, 0x34, 0x33, 0x31,
  0x30, 0x31, 0x30, 0x34, 0x30,
  0x09, 0x06, 0x01, 0x01, 0x01, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x0e, 0x8b, // Active Power +
  0x09, 0x06, 0x01, 0x01, 0x02, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, // Active Power -
  0x09, 0x06, 0x01, 0x01, 0x03, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x68, // Reactive Power +
  0x09, 0x06, 0x01, 0x01, 0x04, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, // Reactive Power -
  0x09, 0x06, 0x01, 0x01, 0x1f, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0xe6, // Current L1
  0x09, 0x06, 0x01, 0x01, 0x33, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x06, 0x49, // Current L2
  0x09, 0x06, 0x01, 0x01, 0x47, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x05, 0xc2, // Current L3
  0x09, 0x06, 0x01, 0x01, 0x20, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdc, // Voltage L1
  0x09, 0x06, 0x01, 0x01, 0x34, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdd, // Voltage L2
  0x09, 0x06, 0x01, 0x01, 0x48, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdb, // Voltage L3
  0x79, 0xbc, 0x7e };

const uint8_t messysample[] = {
  0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, // trash

  0x7e, 0xa0, 0xe2, 0x2b, 0x21, 0x13, 0x23, 0x9a,
  0xe6, 0xe7, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, // Unknown
  0x0c, 0x07, 0xe2, 0x0b, 0x12, 0x07, 0x14, 0x17, 0x1e, 0xff, 0x80, 0x00, 0x00,
  0x02, 0x19, // List ID
  0x0a, 0x0e, 0x4b, 0x61, 0x6d, 0x73, 0x74, 0x72, 0x75, 0x70, 0x5f, 0x56, 0x30, 0x30, 0x30, 0x31, //OBIS List version ID
  0x09, 0x06, 0x01, 0x01, 0x00, 0x00, 0x05, 0xff, // OBIS for Meter ID
  0x0a, 0x10, 0x35, 0x37, 0x30, 0x36, 0x35, 0x36, 0x37, // Meter ID
  0x32, 0x38, 0x34, 0x32, 0x33, 0x35, 0x31, 0x36, 0x37, // OBIS for Meter Type
  0x09, 0x06, 0x01, 0x01, 0x60, 0x01, 0x01, 0xff, 0x0a, 0x12, 0x36, 0x38, 0x34, 0x31, 0x31, 0x32, 0x31, 0x42, 0x4e, 0x32, 0x34, 0x33, 0x31,
  0x30, 0x31, 0x30, 0x34, 0x30,
  0x09, 0x06, 0x01, 0x01, 0x01, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x0e, 0x8b, // Active Power +
  0x09, 0x06, 0x01, 0x01, 0x02, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, // Active Power -
  0x09, 0x06, 0x01, 0x01, 0x03, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x68, // Reactive Power +
  0x09, 0x06, 0x01, 0x01, 0x04, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, // Reactive Power -
  0x09, 0x06, 0x01, 0x01, 0x1f, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0xe6, // Current L1
  0x09, 0x06, 0x01, 0x01, 0x33, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x06, 0x49, // Current L2
  0x09, 0x06, 0x01, 0x01, 0x47, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x05, 0x7e, // Current L3
  0x09, 0x06, 0x01, 0x01, 0x20, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdc, // Voltage L1
  0x09, 0x06, 0x01, 0x01, 0x34, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdd, // Voltage L2
  0x09, 0x06, 0x01, 0x01, 0x48, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdb, // Voltage L3
  0x79, 0xbc, 0x7e,

  0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, // trash

  0x7e, 0xa0, 0xe2, 0x2b, 0x21, 0x13, 0x23, 0x9a,
  0xe6, 0xe7, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, // Unknown
  0x0c, 0x07, 0xe2, 0x0b, 0x12, 0x07, 0x14, 0x17, 0x1e, 0xff, 0x80, 0x00, 0x00,
  0x02, 0x19, // List ID
  0x0a, 0x0e, 0x4b, 0x61, 0x6d, 0x73, 0x74, 0x72, 0x75, 0x70, 0x5f, 0x56, 0x30, 0x30, 0x30, 0x31, //OBIS List version ID
  0x09, 0x06, 0x01, 0x01, 0x00, 0x00, 0x05, 0xff, // OBIS for Meter ID
  0x0a, 0x10, 0x35, 0x37, 0x30, 0x36, 0x35, 0x36, 0x37, // Meter ID
  0x32, 0x38, 0x34, 0x32, 0x33, 0x35, 0x31, 0x36, 0x37, // OBIS for Meter Type
  0x09, 0x06, 0x01, 0x01, 0x60, 0x01, 0x01, 0xff, 0x0a, 0x12, 0x36, 0x38, 0x34, 0x31, 0x31, 0x32, 0x31, 0x42, 0x4e, 0x32, 0x34, 0x33, 0x31,
  0x30, 0x31, 0x30, 0x34, 0x30,
  0x09, 0x06, 0x01, 0x01, 0x01, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x0e, 0x8b, // Active Power +
  0x09, 0x06, 0x01, 0x01, 0x02, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, // Active Power -
  0x09, 0x06, 0x01, 0x01, 0x03, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x68, // Reactive Power +
  0x09, 0x06, 0x01, 0x01, 0x04, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, // Reactive Power -
  0x09, 0x06, 0x01, 0x01, 0x1f, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0xe6, // Current L1
  0x09, 0x06, 0x01, 0x01, 0x33, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x06, 0x49, // Current L2
  0x09, 0x06, 0x01, 0x01, 0x47, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x05, 0xc2, // Current L3
  0x09, 0x06, 0x01, 0x01, 0x20, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdc, // Voltage L1
  0x09, 0x06, 0x01, 0x01, 0x34, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdd, // Voltage L2
  0x09, 0x06, 0x01, 0x01, 0x48, 0x07, 0x00, 0xff, 0x12, 0x00, 0xdb, // Voltage L3
  0x79, 0xbc, 0x7e,

  0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, // trash  

};

void printMeterData(const MeterData & meterData)
{
  std::cout << "Active power+: ";
  if (meterData.activePowerPlusValid) {
    std::cout << meterData.activePowerPlus << " W" << std::endl;
  }
  std::cout << "Active power-: ";
  if (meterData.activePowerMinusValid) {
    std::cout << meterData.activePowerMinus << " W"<< std::endl;
  }
  std::cout << "Reactive power+: ";
  if (meterData.reactivePowerPlusValid) {
    std::cout << meterData.reactivePowerPlus << " W"<< std::endl;
  }
  std::cout << "Reactive power-: ";
  if (meterData.reactivePowerMinusValid) {
    std::cout << meterData.reactivePowerMinus << " W" << std::endl;
  }
  if (meterData.centiAmpereL1Valid) {
    std::cout << "Current phase L1: " << meterData.centiAmpereL1/100.0 << " A" << std::endl;
  }
  if (meterData.centiAmpereL2Valid) {
    std::cout << "Current phase L2: " << meterData.centiAmpereL2/100.0 << " A" << std::endl;
  }
  if (meterData.centiAmpereL3Valid) {
    std::cout << "Current phase L3: " << meterData.centiAmpereL3/100.0 << " A" << std::endl;
  }

  std::cout << "Voltage phase L1: ";
  if (meterData.voltageL1Valid) {
    std::cout << meterData.voltageL1 << " V" << std::endl;
  }
  std::cout << "Voltage phase L2: ";
  if (meterData.voltageL2Valid) {
    std::cout << meterData.voltageL2 << " V" << std::endl;
  }
  std::cout << "Voltage phase L3: ";
  if (meterData.voltageL3Valid) {
    std::cout << meterData.voltageL3 << " V" << std::endl;
  }
}

void printFrame(const VectorView& frame)
{
  std::cout << "Sample frame: ";
  for (size_t i = 0; i < frame.size(); ++i) {
    if (i < frame.size()-1 && frame[i] == 0x9 && frame[i+1] == 0x6) {
      std::cout << std::endl;
    }
    std::cout << std::hex << (uint32_t)frame[i] << " ";
  }
  std::cout << std::dec << std::endl;
}

void testIntegerDivisionPrinting()
{
  uint32_t centiAmpere = 12345;
  char msg[60];
  int position = 0;
  position += snprintf(msg+position, sizeof(msg)-position, "%u", centiAmpere / 100);
  position += snprintf(msg+position, sizeof(msg)-position, ".");
  position += snprintf(msg+position, sizeof(msg)-position, "%u", centiAmpere % 100);
  std::string result(msg);
  std::cout << "Integer division test result: " << msg << " expected: " << "123.45" << std::endl;
  assert(result == "123.45");
}

int main() {
  std::vector<uint8_t> buffer = std::vector<uint8_t>(messysample, messysample+sizeof(messysample));
  std::vector<VectorView> frames = getFrames(buffer);
  std::cout << "Number of frames found: " << frames.size() << std::endl;
  for (int i = 0; i < frames.size(); ++i) {
    //printFrame(frames[i]);
    MeterData powerInfo = parseMbusFrame(frames[i]);
    printMeterData(powerInfo);
  }
  testIntegerDivisionPrinting();
}
